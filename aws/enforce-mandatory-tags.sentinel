# Check all resources have required tags

# Based on https://github.com/hashicorp/learn-sentinel-policy-upload/blob/main/restrict-aws-instances-type-and-tag.sentinel

# Imports mock data
import "tfplan/v2" as tfplan
import "strings"

# Get all AWS resources from all modules
aws_resources = filter tfplan.resource_changes as _, rc {
	strings.has_prefix(rc.type, "aws_") and
		(rc.change.actions contains "create" or rc.change.actions is ["update"])
}

# Mandatory Resource Tags
mandatory_tags = [
	"Name",
	"ttl",
	"owner",
	"terraform",
	"purpose",
]

is_taggable = func(resource) {
	if (keys(resource.change.after) contains "tags" or keys(resource.change.after) contains "all_tags") {
		return true
	}

	return false
}

check_tags = func(resource, mt) {
	# if the resource is untaggable, this rule does not apply
	if not is_taggable(resource) {
		return true
	}

	# Check tags explicitly defined on the resource
	if (keys(resource.change.after) contains "tags" and resource.change.after.tags is not null) {
		if (resource.change.after.tags contains mt) {
			return true
		}
	}

	# Check tags defined on the Terraform provider
	if (keys(resource.change.after) contains "all_tags" and resource.change.after.all_tags is not null) {
		if (resource.change.after.all_tags contains mt) {
			return true
		}
	}

	return false
}

# Rule to enforce tags on all resources
mandatory_resource_tags = rule {
	all aws_resources as _, resource {
		all mandatory_tags as mt {
			(check_tags(resource, mt)) or
				not print("Resource Failed:", resource.address, "Missing tag:", mt)
		}
	}
}

# Main rule that requires other rules to be true
main = rule {
	(mandatory_resource_tags) else true
}
