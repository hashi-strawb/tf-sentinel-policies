# Check all resources have required tags

# Based on https://github.com/hashicorp/learn-sentinel-policy-upload/blob/main/restrict-aws-instances-type-and-tag.sentinel

# Imports mock data
import "tfplan/v2" as tfplan
import "strings"

# Get all Azure resources from all modules
azure_resources = filter tfplan.resource_changes as _, rc {
	# We just care about resource groups for now
	rc.type is "azurerm_resource_group"
}

# Mandatory Resource Tags
mandatory_tags = [
	"Name",
	"TTL",
	"Owner",
	"Terraform",
	"Purpose",
	"Source",
	"Workspace",
]

check_tags = func(resource, mt) {
	# Check tags explicitly defined on the resource
	if (keys(resource.change.after) contains "tags" and resource.change.after.tags is not null and resource.change.after.tags is not empty) {
		if (resource.change.after.tags contains mt) {
			return true
		}
	}

	print(resource.address, "missing tag:", mt)
	return false
}

# Unlike the example from hashicorp/learn-sentinel-policy-upload
# we're doing this in a function, so that Sentinel can check everything, rather
# than fail at the first hurdle.
#
# The reason for this is that it gives a much more verbose error log in TFC as to what's missing.
#
# In practice, all these mandatory tags would be set at the Terraform Provider level...
# but I wanted it to work like this as an example, dammit!
check_all_resources = func() {
	# Assume pass until proven otherwise
	rule_pass = true

	for azure_resources as _, resource {
		for mandatory_tags as mt {
			# if any instance of check_tags fails, set rule_pass to false
			if not check_tags(resource, mt) {
				rule_pass = false
			}
		}
	}

	return rule_pass
}

# Check that all resources have required tags
main = rule {
	(check_all_resources()) else true
}
